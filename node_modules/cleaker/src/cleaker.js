import crypto from 'crypto';

// The Cleaker class
class Cleaker {
  static identities = {};  // Store all identities centrally
  
  constructor() {
    this.permissions = {}; // Optional permissions map
  }
  
  // Method to cleak a class instance (verify or create identity)
  cleak(instance) {
    // Check if the instance already has an identity
    if (instance.identity && Cleaker.identities[instance.identity.hash]) {
      console.log('Instance already identified:', instance.identity);
      return this.verify(instance);
    } else {
      console.log('Instance needs to be identified');
      return this.createIdentity(instance);
    }
  }

  // Create an identity for an instance
  createIdentity(instance) {
    const identity = {
      username: instance.username || this.generateUsername(),
      hash: this.generateHash(instance),
      createdAt: new Date(),
    };
    
    // Add the identity to the Cleaker registry
    Cleaker.identities[identity.hash] = identity;
    instance.identity = identity; // Attach identity to the instance
    
    console.log('Created identity for instance:', instance.identity);
    return identity;
  }

  // Verify the identity of the instance
  verify(instance) {
    const { identity } = instance;
    if (Cleaker.identities[identity.hash]) {
      console.log('Identity verified:', identity);
      return true;
    } else {
      console.log('Identity verification failed');
      return false;
    }
  }

  // Generate a unique hash based on the class properties
  generateHash(instance) {
    const data = JSON.stringify(instance);
    return crypto.createHash('sha256').update(data).digest('hex');
  }

  // Generate a random username if not provided
  generateUsername() {
    return 'user_' + Math.random().toString(36).substr(2, 9);
  }

  // Set and check permissions for identities
  setPermissions(identityHash, permissions) {
    this.permissions[identityHash] = permissions;
  }

  checkPermission(identityHash, permission) {
    return this.permissions[identityHash]?.includes(permission) || false;
  }
}

export default Cleaker;